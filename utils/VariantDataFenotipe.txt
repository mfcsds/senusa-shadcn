"use client";
import React, { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Variant } from "@/utils/object";
import {
  generateHGVS,
  extractZygosity,
  fetchVariantDetails,
} from "@/utils/function";
import { Button } from "../ui/button";
import { Ellipsis, PlusCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import axios from 'axios'; // Tambahkan impor axios

const SelectVariant = () => {
  const tempColumns = [
    { header: "Gene", width: "75px", dataKey: "gene_symbol" },
    { header: "Variant Detail", width: "120px", dataKey: "hgvs" },
    { header: "Zygosity", width: "70px", dataKey: "zygosity" },
    { header: "Global Allele", width: "70px", dataKey: "globalallele" },
    { header: "Clinical Sign", width: "150px", dataKey: "clinicalSign" },
    {
      header: "Most Severe Consequences",
      width: "200px",
      dataKey: "severeconsequence",
    },
    { header: "Sift Score", width: "100px", dataKey: "sift_score" },
    { header: "Sift Prediction", width: "100px", dataKey: "sift_prediction" },
    { header: "Phenotypes", width: "100px", dataKey: "phenotypes" }, // Tambahkan kolom fenotipe
    { header: "Action", width: "100px", dataKey: "action" },
  ];

  const [columns, setColumns] = useState(tempColumns);
  const [error, setError] = useState<string | null>(null);
  const [variantItem, setVariantList] = useState<Variant[]>([]);
  const [loading, setLoading] = useState(false);

  // Fungsi untuk mengambil data fenotipe
  const fetchPhenotypeData = async (hgvs: string) => {
    const url = `https://rest.ensembl.org/variation/human/${encodeURIComponent(hgvs)}?phenotypes=1`;
    const headers = { 'Content-Type': 'application/json' };

    try {
      const response = await axios.get(url, { headers });
      if (response.status === 200) {
        const data = response.data;
        if (data.phenotypes && data.phenotypes.length > 0) {
          // Ekstrak deskripsi fenotipe
          const phenotypeDescriptions = data.phenotypes.map((p: any) => p.description).join('; ');
          return phenotypeDescriptions;
        } else {
          return null;
        }
      } else {
        console.error('Error fetching phenotype data:', response.status);
        return null;
      }
    } catch (error) {
      console.error('Error fetching phenotype data:', error);
      return null;
    }
  };

  // Memperbarui fungsi fetchVariantDetails
  const fetchVariantDetailsWithPhenotype = async (variant: Variant) => {
    // Ambil detail varian lainnya
    const details = await fetchVariantDetails(variant);

    // Ambil data fenotipe
    const phenotypes = await fetchPhenotypeData(variant.hgvs);

    return {
      ...details,
      phenotypes: phenotypes,
    };
  };

  const handleFileUpload = async (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = event.target.files?.[0];

    // Reset state saat file baru diunggah
    setColumns([]);
    setVariantList([]);
    setError(null);
    setLoading(true);

    if (file && file.name.endsWith(".vcf")) {
      const reader = new FileReader();

      reader.onload = async (e) => {
        const vcfText = e.target?.result as string;

        // Jika file kosong atau tidak dapat dibaca, tampilkan kesalahan
        if (!vcfText || vcfText.trim() === "") {
          setError("The file appears to be empty or unreadable.");
          setLoading(false);
          return;
        }

        const lines = vcfText.split("\n");

        const headerLine = lines.find((line: string) =>
          line.startsWith("#CHROM")
        );
        if (headerLine) {
          setColumns(tempColumns);
        } else {
          setError("Invalid VCF file: Missing header line (#CHROM)");
          setLoading(false);
          return;
        }

        const dataLines = lines.filter(
          (line: string) => !line.startsWith("#") && line.trim() !== ""
        );

        const parsedVariants = dataLines.map((line: string, index: number) => {
          const fields = line.split("\t");

          const variant: Variant = {
            id: `variant-${index}`,
            id_patient: "",
            id_vcf: "",
            chrom: fields[0],
            pos: fields[1],
            id_var: fields[2],
            ref: fields[3],
            alt: fields[4],
            qual: fields[5],
            filter: fields[6],
            info: fields[7],
            hgvs: "",
            variantReportID: "",
            zygosity: extractZygosity(fields[7]),
            globalallele: null, // Set to null to indicate loading state
            functional_impact: "",
            acmg: "",
            clinicalSign: null, // Set to null to indicate loading state
            gene_id: null,
            gene_symbol: null,
            severeconsequence: null,
            sift_score: null,
            sift_prediction: null,
            phenotypes: null, // Pastikan field ini ada
          };
          variant.hgvs = generateHGVS(variant);
          return variant;
        });

        setVariantList(parsedVariants);

        // Ambil detail tambahan untuk setiap varian
        parsedVariants.forEach((variant, index) => {
          fetchVariantDetailsWithPhenotype(variant).then((details) => {
            setVariantList((prevVariants) => {
              const newVariants = [...prevVariants];
              newVariants[index] = { ...newVariants[index], ...details };
              return newVariants;
            });
          });
        });

        setLoading(false); // Set loading to false after parsing the file
      };

      reader.onerror = () => {
        setError("Error reading the file. Please try again.");
        setLoading(false);
      };

      reader.readAsText(file);
    } else {
      setError("Please upload a valid .vcf file.");
      setLoading(false);
    }
  };

  // Fungsi untuk menampilkan konten sel berdasarkan dataKey
  const renderCellContent = (item: Variant, dataKey: string) => {
    switch (dataKey) {
      case "gene_symbol":
        return item.gene_symbol !== null ? (
          item.gene_symbol
        ) : (
          <Skeleton className="h-4 w-full" />
        );
      case "hgvs":
        return <p className="text-wrap text-[11px] break-words">{item.hgvs}</p>;
      case "zygosity":
        return item.zygosity;
      case "globalallele":
        return item.globalallele !== null ? (
          item.globalallele
        ) : (
          <Skeleton className="h-4 w-full" />
        );
      case "clinicalSign":
        return item.clinicalSign !== null ? (
          item.clinicalSign
        ) : (
          <Skeleton className="h-4 w-full" />
        );
      case "severeconsequence":
        return item.severeconsequence !== null ? (
          item.severeconsequence
        ) : (
          <Skeleton className="h-4 w-full" />
        );

      case "sift_score":
        return item.sift_score !== null ? (
          item.sift_score
        ) : (
          <Skeleton className="h-4 w-full" />
        );
      case "sift_prediction":
        return item.sift_prediction !== null ? (
          item.sift_prediction
        ) : (
          <Skeleton className="h-4 w-full" />
        );
      case "phenotypes":
        return item.phenotypes !== null ? (
          <p className="text-wrap text-[11px] break-words">{item.phenotypes}</p>
        ) : (
          <Skeleton className="h-4 w-full"></Skeleton>
        );
      case "action":
        return (
          <div className="flex flex-row">
            <Button variant={"ghost"}>
              <Ellipsis className="w-4 h-4 text-gray-600" />
            </Button>
            <Button variant={"ghost"}>
              <PlusCircle className="w-4 h-4 text-gray-600" />
            </Button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col">
      <h1 className="text-xl font-bold mb-4">VCF File Uploader</h1>
      <input
        type="file"
        accept=".vcf"
        onChange={handleFileUpload}
        className="mb-4"
      />

      {error && <p style={{ color: "red" }}>{error}</p>}

      {loading ? (
        <p>Loading...</p>
      ) : (
        columns.length > 0 && (
          <div className="w-full h-screen">
            {/* Filter dan Kontrol Sortir */}
            {/* ... kode filter dan sortir jika ada ... */}

            <div className="overflow-x-auto">
              <Table
                className="table-auto border-collapse w-full"
                style={{ tableLayout: "fixed" }}
              >
                <TableHeader className="sticky top-0 bg-gray-100 z-10">
                  <TableRow className="text-xs text-black">
                    {columns.map((col, index) => (
                      <TableHead
                        key={index}
                        className="border py-2 text-left text-black font-semibold"
                        style={{ width: col.width }}
                      >
                        {col.header}
                      </TableHead>
                    ))}
                  </TableRow>
                </TableHeader>
              </Table>
            </div>
            <div
              className="overflow-y-auto"
              style={{ maxHeight: "calc(100vh - 8rem)" }}
            >
              <Table
                className="table-auto border-collapse w-full"
                style={{ tableLayout: "fixed" }}
              >
                <TableBody>
                  {variantItem.map((item, index) => (
                    <TableRow
                      key={index}
                      className="text-wrap text-[10px] break-words"
                    >
                      {columns.map((col, colIndex) => (
                        <TableCell
                          key={colIndex}
                          className="border px-4 py-2 text-wrap break-words"
                          style={{ width: col.width }}
                        >
                          {renderCellContent(item, col.dataKey)}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </div>
        )
      )}
    </div>
  );
};

export default SelectVariant;
