{
  loading ? (
    <p>Loading...</p>
  ) : (
    columns.length > 0 && (
      <div className="w-full h-screen">
        {/* Filter and Sort Controls */}
        <div className="mb-4 flex items-center">
          <label htmlFor="clinicalSignFilter" className="mr-2">
            Filter by Clinical Sign:
          </label>
          <input
            id="clinicalSignFilter"
            type="text"
            value={filterClinicalSign}
            onChange={(e) => setFilterClinicalSign(e.target.value)}
            className="border rounded p-1 mr-4"
          />
          <label htmlFor="phenotypesFilter" className="mr-2">
            Filter by Phenotypes:
          </label>
          <input
            id="phenotypesFilter"
            type="text"
            value={filterPhenotypes}
            onChange={(e) => setFilterPhenotypes(e.target.value)}
            className="border rounded p-1 mr-4"
          />
          <label htmlFor="zygosityFilter" className="mr-2">
            Filter by Zygosity:
          </label>
          <select
            id="zygosityFilter"
            value={filterZygosity}
            onChange={(e) => setFilterZygosity(e.target.value)}
            className="border rounded p-1 mr-4"
          >
            <option value="">All</option>
            <option value="Heterozygous">Heterozygous</option>
            <option value="Homozygous">Homozygous</option>
          </select>
          <button
            onClick={() => setSortGlobalAlleleAsc((prev) => !prev)}
            className="border rounded p-1"
          >
            Sort Global Allele {sortGlobalAlleleAsc ? "▲" : "▼"}
          </button>
        </div>

        <div className="overflow-x-auto">
          <Table
            className="table-auto border-collapse w-full"
            style={{ tableLayout: "fixed" }}
          >
            <TableHeader className="sticky top-0 bg-gray-100 z-10">
              <TableRow className="text-xs text-black">
                {columns.map((col, index) => (
                  <TableHead
                    key={index}
                    className="border py-2 text-left text-black font-semibold"
                    style={{ width: col.width }}
                  >
                    {col.header}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
          </Table>
        </div>
        <div
          className="overflow-y-auto"
          style={{ maxHeight: "calc(100vh - 8rem)" }} // Adjusted for filter controls
        >
          <Table
            className="table-auto border-collapse w-full"
            style={{ tableLayout: "fixed" }}
          >
            <TableBody>
              {variantItem
                .filter((item) => {
                  // Filter by Clinical Sign
                  if (filterClinicalSign) {
                    if (!item.clinicalSign) return false;
                    if (
                      !item.clinicalSign
                        .toLowerCase()
                        .includes(filterClinicalSign.toLowerCase())
                    )
                      return false;
                  }
                  // **Filter by Phenotypes**
                  if (filterPhenotypes) {
                    if (!item.phenotypes) return false;
                    if (
                      !item.phenotypes
                        .toLowerCase()
                        .includes(filterPhenotypes.toLowerCase())
                    )
                      return false;
                  }
                  // Filter by Zygosity
                  if (filterZygosity && item.zygosity !== filterZygosity) {
                    return false;
                  }
                  return true;
                })
                .sort((a, b) => {
                  const gaA = a.gnomadg;
                  const gaB = b.gnomadg;
                  if (gaA == null && gaB == null) return 0;
                  if (gaA == null) return 1;
                  if (gaB == null) return -1;
                  return sortGlobalAlleleAsc ? gaA - gaB : gaB - gaA;
                })
                .map((item, index) => (
                  <TableRow
                    key={index}
                    className="text-wrap text-[10px] break-words"
                  >
                    {columns.map((col, colIndex) => (
                      <TableCell
                        key={colIndex}
                        className="border px-4 py-2 text-wrap break-words"
                        style={{ width: col.width }}
                      >
                        {renderCellContent(item, col.dataKey)}
                      </TableCell>
                    ))}
                  </TableRow>
                ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  );
}

{
  /* Variant Interpretation Modal */
}
<Dialog
  open={isOpenDetailVariantDialog}
  onOpenChange={() => setIsOpenDetailVariantDialog(false)}
>
  {/* <div className="fixed inset-0 bg-black bg-opacity-0 pointer-events-none"></div> */}
  <DialogContent className="max-w-7xl max-h-4xl ">
    <DialogTitle>Variant Information</DialogTitle>
    <DialogDescription>
      Here is the detailed information about the variant.
    </DialogDescription>
    {/* Pass the hgvsNotation as a prop to the VariantInformationModal */}
    <VariantInformationModal hgvsNotation={`${selectedVariant?.hgvs}`} />
  </DialogContent>
</Dialog>;
